#import "../assets/typst/tools/tool.typ"
#import "../assets/typst/tools/tool.typ": *

= جلسه دوازدهم
== Non-parametric Models (ادامه)
=== Artifical Neural Networks
#tool.double_section()[
  #tool.simple_context()[
    رویکردی به نام Bio-inspiration وجود دارد به این صورت که
    برای حل برخی مسأله ها می توان با نگاه به پدیده های زیستی، از آن ها ایده گرفت.
  ]
][
  #tool.definition()[
    شبکه عصبی مصنوعی، یک مدل یادگیری ماشین بدون پارامتر است که از سیستم یادگیری نورون های مغز انسان، اقتباس کرده است.
  ]
]

#tool.definition()[
  Hebbian Learning:
  دو سلولی که باید با هم فعال شوند، باید ارتباط قوی تری بین یک دیگر داشته باشند.
]

==== Artifical Neuron
#tool.definition()[
  مدلی محاسباتی است که از سلول های عصبی انسان الگو گرفته است.
  سلول عصبی مصنوعی، از تعدادی ورودی وزن دار، قسمت محاسباتی و یک خروجی تشکیل شده است.
  #tool.custom_figure(
    image("../images/ML/12_01.png", width: 90%),
    caption: "ورودی های وزن دار، قسمت محاسباتی و خروجی یک سلول عصبی مصنوعی.",
    inset: 1em,
  )
  ورودی ها از سلول های مختلف دیگر، با وزن های مختلف می آیند.
  وزن ها معمولاً اعداد خیلی کوچکی هستند.
  مثلاً:
  $
    -1 <= w_1, w_2, w_3 <= 1
  $
  قسمت محاسباتی خیلی کم دستور است.
  به طوری که گاهی اوقات فقط از دو دستور جمع و تابع انتقال به شکل زیر تشکیل می شود:
  $
    v = sum w_i x_i #h(1em) , #h(1em) y = f(v)
    \
    f(v) arrow "Activation Function / Transfer Function"
  $
]

#tool.example()[
  نمونه هایی از تابع فعال سازی یا تابع انتقال:
  $
    y = "sgn"(v): "If" v >= 0 "then" y = 1 "else" y = 0
  $
  $
    y = v
  $
  $
    y = sigma(v) = 1 / (1 + e^(-v))
  $
]

#tool.question()[
  مسأله XOR با دو ورودی را با شبکه عصبی حل کنید.
]

#tool.true_answer()[
  ابتدا جدول تابع XOR را می کشیم:
  #tool.custom_figure(
    caption: "حالت های ممکن تابع XOR با دو ورودی",
    kind: table,
    inset: 1em,
  )[
    #table(
      columns: 3,
      inset: 1em,
      stroke: black,
      align: center + horizon,
      $x_1$, $x_2$, $y$,
      "0", "0", "0",
      "0", "1", "1",
      "1", "0", "1",
      "1", "1", "0",
    )
  ]

  شکل نموداری این جدول به صورت زیر می باشد:
  #tool.custom_figure(
    image("../images/ML/12_02.png", width: 53%),
    caption: "نمایش تابع XOR با دو ورودی بر روی نمودار. دایره های تو پر بیانگر عدد ۱ و دایره های تو خالی بیانگر عدد ۰ هستند.",
    inset: 1em,
  )

  در نهایت تابع فعال سازی و شبکه عصبی XOR را به صورت زیر نوشته و رسم می کنیم:
  $
    v >= 0 arrow 1 , v < 0 arrow 0
  $
  #tool.custom_figure(
    image("../images/ML/12_03.png"),
    caption: "پیاده سازی تابع XOR با دو ورودی به کمک شبکه عصبی",
    inset: 1em,
    refrence: <image_12_03>,
  )
  با تست شبکه عصبی بالا مشاهده می کنیم که به ازای تمامی مقادیر ممکن ورودی $x_1$ و $x_2$ خروجی درستی تولید می شود.
]

#tool.double_section()[
  #tool.tip()[
    مسأله XOR با یک خط حل نمی شود.
    هر یک از نورون های @image_12_03، یک Classifier خطی است.
    یعنی هر یک از آن ها به صورت تکی تنها می تواند مسائل خطی جدایی پذیر را حل کند.
    اما با وصل کردن آن ها به یکدیگر می توان مسأله ای که با یک خط حل نمی شود را نیز حل کرد.
  ]
][
  #tool.tip()[
    در شبکه عصبی، سلول ها با الگو و وزن خاصی کنار هم قرار گرفته می شوند تا یک مسأله پیچیده را حل کنند.
    هر چه ساختار این چینش پیچیده تر باشد، می توان مسائل پیچیده تری را حل کرد.
    #v(4.8em)
  ]
]
